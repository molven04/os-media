<?php

if ( ! class_exists( 'OSmedia_base' ) ) {

	/**
	 * Main / front controller class
	 *
	 * OSmedia WordPress plugins
	 */
	class OSmedia_base extends OSmedia_Module {

		protected static $readable_properties  = array();    // These should really be constants, but PHP doesn't allow class constants to be arrays
		protected static $writeable_properties = array();

		protected $modules;

		const VERSION    = '2.1';
		const PREFIX     = 'OSmedia_';
		const DEBUG_MODE = false;

		/////////////////////////////// Magic methods ////////////////////////////////////

		/**
		 * Constructor
		 *
		 * @mvc Controller
		 */
		protected function __construct() {
			// GET OPTS & flattern array
			self::$OSmedia_options = self::get_settings();

			$this->register_hook_callbacks();

			$this->modules = array( 
				'OSmedia_Settings'  	=> OSmedia_Settings::get_instance(),
				'OSmedia_Post_Admin' 	=> OSmedia_Post_Admin::get_instance(),
				'OSmedia_Post_Frontend' => OSmedia_Post_Frontend::get_instance(),
				'OSmedia_Version_Vars' 	=> OSmedia_Version_Vars::get_instance()
				// 'OSmedia_Cron'        => OSmedia_Cron::get_instance()
			);
		}

		//////////////////////////////// Static methods /////////////////////////////////////

		/**
		 * Retrieves all of the settings from the database and define index (set '' values) for null parameters
		 *
		 * @mvc Model
		 *
		 * @return array
		 */
		public static function get_settings() {
			
			// $settings = shortcode_atts(	self::$default_settings, get_option( self::OPTS, array() )	);

// PROVVISORIO !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!			
			$base_opts = OSmedia_Settings::get_default_settings();
			$opts = get_option( OSmedia_OPTS, array() );
			// define index for null parameters
			foreach( $base_opts as $k => $v ) {
				// if( is_array($v) ) {
					// foreach ( $v as $kk => $vv ) {
						if( isset($opts[$k]) ) $settings_complete[$k] = $opts[$k];
						else $settings_complete[$k] = '';
					// }
				// }
			} 
// PROVVISORIO !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
			return $settings_complete;
		}

		/**
		 * Enqueues CSS, JavaScript, etc in public area
		 *
		 * @mvc Controller
		 */
		public static function load_resources_frontend() {

			if( is_array(self::$OSmedia_options) ) {
				$options = self::$OSmedia_options;
				// $player = $options['basic']['OSmedia_player'];
				if( isset($options['OSmedia_skin']) ) $skin = $options['OSmedia_skin']; else{};
				if( isset($options['OSmedia_yt_vjs']) ) $yt_vjs = $options['OSmedia_yt_vjs']; else $yt_vjs = '';
			}else{
				$skin = 'video-js'; 
				$yt_vjs = '';
			}			

		    $plugins_url = plugins_url( OSmedia_FOLDER );
		    print "<link rel='stylesheet' type='text/css' href='".$plugins_url."/player/videojs/video-js.css' />\n";
		    print "<link rel='stylesheet' type='text/css' href='".$plugins_url."/player/videojs/skin/".$skin.".css' />\n"; 
		    print "<script src='".$plugins_url."/player/videojs/video.js' type='text/javascript' ></script>\n";

		    if ( $yt_vjs == 'on' || $yt_vjs == 'true' ) 
        		print "<script src='".$plugins_url."/player/videojs/videojs-youtube.js'></script>\n";

        	// wp_register_style( self::PREFIX . 'main_style_frontend', plugins_url( 'css/frontend.css', dirname( __FILE__ ) ) );
			// wp_enqueue_style( self::PREFIX . 'main_style_frontend' ); // frontend css

		}

		/**
		 * Enqueues CSS, JavaScript, etc in admin area
		 *
		 * @mvc Controller
		 */
		public static function load_resources_admin() {

			wp_register_script(
				self::PREFIX . 'main_admin_script',
				plugins_url( 'javascript/OSmedia.js', dirname( __FILE__ ) ),
				array( 'wp-color-picker' ),
				self::VERSION
			);

			wp_register_style(
				self::PREFIX . 'main_admin_style',
				plugins_url( 'css/admin.css', dirname( __FILE__ ) ),
				array( ),
				self::VERSION
			);

			wp_enqueue_script( self::PREFIX . 'main_admin_script' );
			// wp_enqueue_script( 'videojs_player_script');
			wp_enqueue_style( self::PREFIX . 'main_admin_style' );
			wp_enqueue_style( 'wp-color-picker' );
			// wp_enqueue_style( self::PREFIX . 'skin_player' );

		}

		/**
		 * Clears caches of content generated by caching plugins like WP Super Cache
		 *
		 * @mvc Model
		 */
		protected static function clear_caching_plugins() {
			// WP Super Cache
			if ( function_exists( 'wp_cache_clear_cache' ) ) {
				wp_cache_clear_cache();
			}

			// W3 Total Cache
			if ( class_exists( 'W3_Plugin_TotalCacheAdmin' ) ) {
				$w3_total_cache = w3_instance( 'W3_Plugin_TotalCacheAdmin' );

				if ( method_exists( $w3_total_cache, 'flush_all' ) ) {
					$w3_total_cache->flush_all();
				}
			}
		}


		///////////////////////////////////// Instance methods ///////////////////////////////////////
		
		/**
		 * Prepares sites to use the plugin during single or network-wide activation
		 *
		 * @mvc Controller
		 *
		 * @param bool $network_wide
		 */
		public function activate( $network_wide ) {

			if ( $network_wide && is_multisite() ) {
				$sites = wp_get_sites( array(  'limit' => false ) );

				foreach ( $sites as $site ) {
					switch_to_blog( $site['blog_id'] );
					$this->single_activate( $network_wide );
					restore_current_blog();
				}
			} else {
				$this->single_activate( $network_wide );
			}
		}

		/**
		 * Runs activation code on a new site when it's created
		 *
		 * @mvc Controller
		 *
		 * @param int $blog_id
		 */
		public function activate_new_site( $blog_id ) {

			switch_to_blog( $blog_id );
			$this->single_activate( true );
			restore_current_blog();
		}

		/**
		 * Prepares a single blog to use the plugin
		 *
		 * @mvc Controller
		 *
		 * @param bool $network_wide
		 */
		protected function single_activate( $network_wide ) {
			foreach ( $this->modules as $module ) {
				$module->activate( $network_wide );
				// create default options if not exists
				if( @get_option(OSmedia_OPTS) ) 
					$opts = @get_option(OSmedia_OPTS);				
				if( !isset($opts) || !is_array($opts) ) 
					update_option( OSmedia_OPTS, OSmedia_settings::get_default_settings() );
			}
			flush_rewrite_rules();
		}

		/**
		 * Rolls back activation procedures when de-activating the plugin
		 *
		 * @mvc Controller
		 */
		public function deactivate() {
			foreach ( $this->modules as $module ) {
				$module->deactivate();
			}
			flush_rewrite_rules();
		}

		/**
		 * uninstall  
		 *
		 * @mvc Controller
		 */
		public function uninstall_hook() { 
			delete_option( 'OSmedia_settings' ); 
			// For site options in Multisite
			delete_site_option( 'OSmedia_settings' );  
		}

		/**
		 * Register callbacks for actions and filters
		 *
		 * @mvc Controller
		 */
		public function register_hook_callbacks() {
			add_action( 'wpmu_new_blog',         __CLASS__ . '::activate_new_site' );
			// ADD SCRIPTS
			add_action( 'wp_head', 				__CLASS__ . '::load_resources_frontend' ); // sostituisce il gancio "wp_enqueue_scripts" che da problemi..
			add_action( 'admin_enqueue_scripts', __CLASS__ . '::load_resources_admin' ); // carica script anche in area admin
			//
			// add_action( 'init',                  array(  $this, 'init' ) );
			add_action( 'init',                  array(  $this, 'upgrade' ), 11 );
			register_uninstall_hook(__FILE__, 'uninstall_hook');
		}

		/**
		 * Initializes variables
		 *
		 * @mvc Controller
		 */
		public function init() {

			/*
			try {
				$instance_example = new OSmedia_Instance_Class( 'Instance example', '42' );
				//add_notice( $instance_example->foo .' '. $instance_example->bar );
			} catch ( Exception $exception ) {
				add_notice( __METHOD__ . ' error: ' . $exception->getMessage(), 'error' );
			}
			*/
		}

		/**
		 * Checks if the plugin was recently updated and upgrades if necessary
		 *
		 * @mvc Controller
		 *
		 * @param string $db_version
		 */
		public function upgrade( $db_version = 0 ) {
			
			// echo '---------' . $this->modules['OSmedia_Settings']->settings['info']['db-version'] ;

			if ( version_compare( $this->modules['OSmedia_Settings']->settings['OSmedia_db-version'], self::VERSION, '==' ) ) return;

			foreach ( $this->modules as $module ) {
				$module->upgrade( $this->modules['OSmedia_Settings']->settings['OSmedia_db-version'] );
			}

			$this->modules['OSmedia_Settings']->settings = array ('OSmedia_db-version' => self::VERSION );
			self::clear_caching_plugins();

		}

		/**
		 * Checks that the object is in a correct state
		 *
		 * @mvc Model
		 *
		 * @param string $property An individual property to check, or 'all' to check all of them
		 * @return bool
		 */
		protected function is_valid( $property = 'all' ) {
			return true;
		}

	} // end OSmedia_base
}
